generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  emailVerified Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Dati fatturazione
  companyName    String?
  billingAddress String?
  civicNumber    String?
  cap            String?
  city           String?
  codiceFiscale  String?
  partitaIva     String?
  billingEmail   String?
  pec            String?
  codiceSDI      String?

  // Relazioni
  shippingAddresses ShippingAddress[]
  richieste         Richiesta[]
  messaggi          Messaggio[] @relation("UtenteMessaggi")
}

model ShippingAddress {
  id            String   @id @default(cuid())
  label         String
  address       String
  civicNumber   String?
  cap           String?
  city          String?
  companyName   String?
  codiceFiscale String?
  partitaIva    String?
  email         String?
  pec           String?
  codiceSDI     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  richieste Richiesta[]
}

model Richiesta {
  id        String         @id @default(cuid())
  numero    Int
  anno      Int
  stato     StatoRichiesta @default(INVIATA)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  utente   User   @relation(fields: [utenteId], references: [id])
  utenteId String

  indirizzoSpedizione ShippingAddress @relation(fields: [indirizzoId], references: [id])
  indirizzoId         String

  messaggi Messaggio[]
  articoli ArticoloRichiesta[]
  offerta  Offerta?
}

model ArticoloRichiesta {
  id          String    @id @default(cuid())
  testo       String
  richiesta   Richiesta @relation(fields: [richiestaId], references: [id])
  richiestaId String

  allegati Allegato[]
}

model Allegato {
  id         String            @id @default(cuid())
  url        String
  articolo   ArticoloRichiesta @relation(fields: [articoloId], references: [id])
  articoloId String
}

model Offerta {
  id          String   @id @default(cuid())
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vista       Boolean  @default(false)
  richiesta   Richiesta @relation(fields: [richiestaId], references: [id])
  richiestaId String  @unique
}

model Messaggio {
  id        String   @id @default(cuid())
  contenuto String
  daAdmin   Boolean
  letto     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  richiesta   Richiesta @relation(fields: [richiestaId], references: [id])
  richiestaId String

  utente   User   @relation("UtenteMessaggi", fields: [utenteId], references: [id])
  utenteId String
}

model pdfCounter {
  year  Int @id
  count Int
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userEmail String
  expires   DateTime
}

enum StatoRichiesta {
  INVIATA
  IN_LAVORAZIONE
  COMPLETATA
}
